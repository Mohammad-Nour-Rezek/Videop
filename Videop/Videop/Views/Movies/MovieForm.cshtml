@model Videop.ViewModels.MovieFormViewModel

@{
    ViewBag.Title = "MovieForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*@if (Model.Movie == null)
{
    <h2>New Movie</h2>
}
else
{
    <h2>Edit Movie</h2>
}*@

<h2>@Model.Title</h2>

@*-- 1: we can use save for both new and edit, 2: or create another action called update and based on id set the target action dynamically --*@
@using (Html.BeginForm("Save", "Movies"))
{
    @Html.ValidationSummary(true, "Please fix the following errors.")
    <div class="form-group">
        @*-- The Name is value for html lable element --*@
        @Html.LabelFor(m => m.Name)
        @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Name)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ReleaseDate)
        @*-- Format string for date --*@
        @Html.TextBoxFor(m => m.ReleaseDate, "{0:d MMM yyyy}", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.ReleaseDate)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.GenreId)
        @Html.DropDownListFor(m => m.GenreId, new SelectList(Model.Genre, "Id", "GenreType"), "Select Genre Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.GenreId)
    </div>

    <div class="form-group">
        @*-- The Name is value for html lable element --*@
        @Html.LabelFor(m => m.NumberInStock)
        @Html.TextBoxFor(m => m.NumberInStock, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.NumberInStock)
    </div>

    @*-- This way insted of initialize the default obj in the action for validation summary --*@
    @*@Html.Hidden("Movie.Id", (Model.Movie != null) ? Model.Id : 0)*@

    @Html.HiddenFor(m => m.Id)
    @Html.AntiForgeryToken()
    <button type="submit" class="btn btn-primary">Save</button>
}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")    
}